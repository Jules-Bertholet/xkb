partial alphanumeric_keys modifier_keys keypad_keys function_keys
xkb_symbols "colemak_dh_wide_am" {

    include "us(basic)"

    name[1] = "English (Colemak-DH Wide, American)";

    ///// Alphanumeric \\\\\

    key.type[1] = "EIGHT_LEVEL";
    //                                                                                        SWUNG DASH                   TWO-EM DASH  THREE-EM DASH
    key <TLDE> { [ grave        , asciitilde    , dead_grave          , dead_tilde          , U2053     , dead_belowtilde, U2E3A      , U2E3B        ] };
    //                                                                                  INTERROBANG INVERTED INTERROBANG  REVERSED PILCROW SIGN
    key <AE01> { [ 1            , exclam        , exclamdown          , paragraph           , U203D, U2E18              , U204B                 ] };
    key <AE02> { [ 2            , at            , degree              , dead_abovering      , copyright, registered, dead_belowring, phonographcopyright ] };
    //                                                                                TRIPLE DAGGER
    key <AE03> { [ 3            , numbersign    , dagger              , doubledagger        , U2E4B, figdash] };
    //                                                                                        Right half ring  Left half ring  Glottal dead key
    key <AE04> { [ 4            , dollar        , cent                , dead_currency       , U02BF          , U02BE         , UFDD0] };
    //                                                                                         PER TEN THOUSAND COMMERCIAL MINUS
    key <AE05> { [ 5            , percent       , EuroSign            , permille            , U2031           , U2052           , dead_hook, dead_horn ] };
    //                                                                                                              Combining caron below         CARET INSERTION POINT
    key <AE06> { [ 6            , asciicircum   , dead_circumflex     , dead_caron          , dead_belowcircumflex, U032C                , caret, U2041 ] };
    //                                                                            HYPHENATION POINT DOUBLE HYPHEN  OBLIQUE HYPHEN DOUBLE OBLIQUE HYPHEN
    key <AE07> { [ equal        , plus          , ISO_Group_Latch     , NoSymbol            , U2027, U2E40       , U2E5D        , U2E17                 ] };
    //                                                                             TIRONIAN SIGN ET TIRONIAN SIGN CAPITAL ET   Word separator middle dot  PALM BRANCH
    key <AE08> { [ 7            , ampersand     , doublelowquotemark  , singlelowquotemark  , U204A, U2E52                   , U2E31                    , U2E19 ], type[1] = "EIGHT_LEVEL_56_SEMIALPHABETIC" };
    //                                                                                        LOW ASTERISK TWO ASTERISKS ALIGNED VERTICALLY  ASTERISM  FLORAL HEART áºž
    key <AE09> { [ 8            , asterisk      , ssharp              , section             , U204E      , U2051                          , U2042    , U2766, U1E9E], type[1] = "EIGHT_LEVEL_PLUS_3_LOCK" };
    //                                                                                        LEFT ANGLE BRACKET   LEFT FLATTENED PARENTHESIS   LEFT SIDEWAYS U BRACKET    ORNATE LEFT PARENTHESIS
    key <AE10> { [ 9            , parenleft     , leftdoublequotemark , leftsinglequotemark , U27E8              , U27EE                      ,  U2E26                  , UFD3E  ] };
    //                                                                                        RIGHT ANGLE BRACKET  RIGHT FLATTENED PARENTHESIS  RIGHT SIDEWAYS U BRACKET  ORNATE RIGHT PARENTHESIS
    key <AE11> { [ 0            , parenright    , rightdoublequotemark, rightsinglequotemark, U27E9              , U27EF                      , U2E27                   ,  UFD3F] };
    //                                                                                       HYPHEN  NON-BREAKING HYPHEN  HORIZONTAL BAR
    key <AE12> { [ minus        , underscore    , endash              , emdash              , U2010, U2011              , U2015        , overline     ] };

    key <TAB>  { [ Tab          , ISO_Left_Tab  , UFDD9               , NoSymbol            , UFDEF, UFDEE, UFDED, UFDEC ] };
    key.type[1] = "EIGHT_LEVEL_ALPHABETIC";
    key <AD01> { [ q            , Q             , adiaeresis          , Adiaeresis           ] };
    //                                                                                         wynn   WYNN   Latin omega  Latin OMEGA
    key <AD02> { [ w            , W             , ediaeresis          , Ediaeresis           , U01BF, U01F7, UA7B7      , UA7B6      ] };
    //                                                                                         Egyptological ain  Egyptological AIN
    key <AD03> { [ f            , F             , ocircumflex         , Ocircumflex          , UA725            , UA724] };
    //                                                                                         glottal stop  GLOTTAL STOP  saltillo  SALTILLO  
    key <AD04> { [ p            , P             , acircumflex         , Acircumflex          , U0242       , U0241       , UA78C   , UA78B   ] };
    //                                                                                         Latin beta  Latin BETA
    key <AD05> { [ b            , B             , odiaeresis          , Odiaeresis           , UA7B5     , UA7B4     ] };
    //                                             SINGLE LEFT-POINTING ANGLE QUOTATION MARK  BOTTOM LEFT HALF BRACKET TOP LEFT HALF BRACKET  LEFT SQUARE BRACKET WITH QUILL  LEFT VERTICAL BAR WITH QUILL
    key <AD06> { [ bracketleft  , braceleft     , guillemetleft       , U2039               , U2E24                   , U2E22               , U2045                         , U2E20],
                 type[1] = "EIGHT_LEVEL" };
    //                                                                                         j with crossed-tail  J with crossed-tail
    key <AD07> { [ j            , J             , ae                  , AE                   , U029D              , UA7B2              ] };
    //                                                                                         l with bar  L with bar  l with belt  L with belt
    key <AD08> { [ l            , L             , idiaeresis          , Idiaeresis           , U019A     , U023D     , U026C      , UA7AD] };
    //                                                                                         u with stroke  U with stroke  Latin upsilon  Latin UPSILON
    key <AD09> { [ u            , U             , uacute              , uacute               , UA7B9        , UA7B8        , U028A        , U01B1        ] };
    //                                                                                         ram's horn  RAM'S HORN  Latin lambda  Latin LAMBDA
    key <AD10> { [ y            , Y             , udiaeresis          , Udiaeresis           , U0264     , UA7CB     , UA7DB       , UA7DA       ] };
    key.type[1] = "EIGHT_LEVEL";
    //                                                                                         Letter dead key
    key <AD11> { [ semicolon    , colon         , dead_belowcomma     , dead_macron          , UFDD1          , dead_belowmacron ] };
    //                                                                                                                              Inverted breve below
    key <AD12> { [ apostrophe   , quotedbl      , dead_acute          , dead_breve           , dead_belowbreve, dead_invertedbreve, U032F] };
    //                                                                  BULLET                WHITE BULLET  Double vertical bar
    key <BKSL> { [ backslash    , bar           , periodcentered      , U2022               , U25E6       , U2016              , brokenbar] };

    key.type[1] = "EIGHT_LEVEL_ALPHABETIC";
    //                                                                                         Latin alpha  Latin ALPHA  Egyplological alef  Egyptological ALEF
    key <AC01> { [ a            , A             , aacute              , Aacute               , U0251      , U2C6D      , UA723             , UA722 ] };
    //                                                                                         small capital R  YR
    key <AC02> { [ r            , R             , agrave              , Agrave               , U0280          , U01A6] };
    //                                                                                        Long s         esh    ESH
    key <AC03> { [ s            , S             , ucircumflex         , Ucircumflex         , U017F , S, U0283, U01A9 ] };
    //                                                                                                      t with diagonal stroke  T with diagonal stroke
    key <AC04> { [ t            , T             , atilde              , Atilde              , thorn, THORN, U2C66                 , U023E                 ] };
    //                                                                                         yogh   YOGH   Latin gamma  latin GAMMA
    key <AC05> { [ g            , G             , aring               , Aring                , U201D, U201C, U0263      , U0194 ] };
    //                                            SINGLE RIGHT-POINTING ANGLE QUOTATION MARK  BOTTOM RIGHT HALF BRACKET TOP RIGHT HALF BRACKET RIGHT SQUARE BRACKET WITH QUILL  RIGHT VERTICAL BAR WITH QUILL
    key <AC06> { [ bracketright , braceright    , guillemetright      , U203A               , U2E25                    , U2E23,              U2046                            , U2E21     ],
                 type[1] = "EIGHT_LEVEL" };
    //                                                                                        Turned m  turned M
    key <AC07> { [ m            , M             , oslash              , Oslash              , U026F   , U019C ] };
    //                                                                                                  Open e  Open E
    key <AC08> { [ n            , N             , ntilde              , Ntilde              , eng, ENG, U025B , U0190 ] };
    //                                                                                                      Reversed e  Reversed E
    key <AC09> { [ e            , E             , eacute              , Eacute              , schwa, SCHWA, U01DD     , U018E     ] };
    //                                                                                        Latin iota  Latin IOTA  Small capital i  Small capital I
    key <AC10> { [ i            , I             , iacute              , Iacute              , U0269     , U0196     , U026A          , UA7AE          ] };
    //                                                                                         Barred o  Barred O  ou     OU
    key <AC11> { [ o            , O             , oacute              , Oacute               , U0275   , U019F   , U0223, U0222 ] };

    //                                                                                                    z with descender  Z with descender
    key <LSGT> { [ z            , Z             , oe                   , OE                   , ezh, EZH, U2C6C           , U2C6B           ] };
    //                                                                                          Latin chi  Latin CHI
    key <AB01> { [ x            , X             , ugrave               , Ugrave               , UAB53    , UA7B3] };
    //                                                                                          Open o  Open O  c with bar  C with bar
    key <AB02> { [ c            , C             , ccedilla             , Ccedilla             , U0254 , U0186 , UA793     , UA792     ] };
    //                                                                                                    d with tail  African D
    key <AB03> { [ d            , D             , egrave               , Egrave               , eth, ETH, U0256      , U0189    ] };
    //                                                                                          turned v  turned V
    key <AB04> { [ v            , V             , otilde               , Otilde               , U028C   , U0245   ] };
    key <AB05> { [ z            , Z             , oe                   , OE                   , ezh, EZH] };
    //                                                                      REVERSED QUESTION MARK     Glottal stop  Pharyngeal voiced fricative
    key <AB06> { [ slash        , question      , questiondown         , dead_stroke         , U2E2E , U0294       , U0295                      ],
                 type[1] = "EIGHT_LEVEL" };
    //                                                                                          kra    KRA
    key <AB07> { [ k            , K             , icircumflex          , Icircumflex          , U0138, { K, U02BC }] };
    //                                                                                          turned h  turned H  hwair  HWAIR
    key <AB08> { [ h            , H             , ecircumflex          , Ecircumflex          , U0265   , UA78D   , U0195, U01F6] };
    key.type[1] = "EIGHT_LEVEL";
    //                                                                                           Combining comma above  Combining comma above right  Combining vertical line above  Combining turned comma above
    key <AB09> { [ comma        , less          , dead_cedilla         , dead_ogonek           , U0313                , U0315                      , U030D                        , U0312 ] };
    //                                                                                                          Combining dot above right
    key <AB10> { [ period       , greater       , ellipsis             , dead_abovedot         , dead_belowdot, U0358                    ] };

    //                                                                                NNBSP   THIN SPACE
    key <SPCE> { [ space        , space         , nobreakspace         , U202F               , U2009    , hyphen],
                 type[1]="EIGHT_LEVEL" };


    ///// Arrow \\\\\

    key.type[1] = "SEVEN_LEVEL";
    //                                                                     UP DOWN ARROW  UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW  NORTH EAST ARROW     LEFTWARDS ARROW WITH TIP UPWARDS    RIGHTWARDS ARROW WITH TIP UPWARDS
    key <UP>   { [ Up                      , uparrow              , U2195               , U21C5                                     , U2197           , U2B11                              , U2B0F                               ] };
    //                                                   ANTICLOCKWISE OPEN CIRCLE ARROW       LEFTWARDS ARROW OVER RIGHTWARDS ARROW  NORTH WEST ARROW   DOWNWARDS ARROW WITH TIP LEFTWARDS     UPWARDS ARROW WITH TIP LEFTWARDS
    key <LEFT> { [ Left                    , leftarrow            , U21BA               , U21C6                                     , U2196           , U21B2                              , U21B0                               ] };
    //                                                                  LEFT RIGHT ARROW  DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW  SOUTH WEST ARROW   LEFTWARDS ARROW WITH TIP DOWNWARDS  RIGHTWARDS ARROW WITH TIP DOWNWARDS
    key <DOWN> { [ Down                    , downarrow            , U2194               , U21F5                                     , U2199           , U2B10                              , U2B0E                               ] };
    //                                                       CLOCKWISE OPEN CIRCLE ARROW       RIGHTWARDS ARROW OVER LEFTWARDS ARROW  SOUTH EAST ARROW  DOWNWARDS ARROW WITH TIP RIGHTWARDS    UPWARDS ARROW WITH TIP RIGHTWARDS
    key <RGHT> { [ Right                   , rightarrow           , U21BB               , U21C4                                     , U2198           , U21B3                              , U21B1                               ] };


    ///// Modifier \\\\\

    key <CAPS> {
        symbols[1] = [ ISO_Group_Latch                                      ],
        actions[1] = [ LatchGroup(group=2,latchToLock=true,clearLocks=true) ],
        type[1] = "ONE_LEVEL"
    };
    key <LFSH> { [ Alt_L ], type[1]="ONE_LEVEL" };
    key <LCTL> {
        symbols[1] = [ Shift_L                                                     , Caps_Lock                ],
        actions[1] = [ LatchMods(modifiers=Shift,latchToLock=false,clearLocks=true), LockMods(modifiers=Lock) ],
        type[1]="TWO_LEVEL"
    };
    key <LALT> {
        symbols[1]=[ Control_L                                                      ],
        actions[1]=[ LatchMods(modifiers=Control,latchToLock=false,clearLocks=true) ],
        type[1]="ONE_LEVEL"
    };
    key <RTSH> { [ Menu, Multi_key ], type[1]="SEVEN_LEVEL" };
    key <RALT> {
        symbols[1] = [ Shift_R                                                     , Caps_Lock                ],
        actions[1] = [ LatchMods(modifiers=Shift,latchToLock=false,clearLocks=true), LockMods(modifiers=Lock) ],
        type[1]="TWO_LEVEL"
    };
    key <RWIN> {
        symbols[1] = [ ISO_Level3_Latch                                                 , ISO_Level5_Latch                                                , ISO_Next_Group    , Alt_R                                                     ],
        actions[1] = [ LatchMods(modifiers=LevelThree,latchToLock=false,clearLocks=true), LatchMods(modifiers=LevelFive,latchToLock=false,clearLocks=true), LockGroup(group=3), LatchMods(modifiers=Alt,latchToLock=false,clearLocks=true)],
        type[1]="PC_CONTROL_ALT_ALTGR"
    };
    key <MENU> {
        symbols[1] = [ Super_R                                                      ],
        actions[1] = [ LatchMods(modifiers=Super,latchToLock=false,clearLocks=true) ],
        type[1]="ONE_LEVEL"
    };
    key <RCTL> {
        symbols[1]=[ Control_R                                                      ],
        actions[1]=[ LatchMods(modifiers=Control,latchToLock=false,clearLocks=true) ],
        type[1]="ONE_LEVEL"
    };

    ///// Function \\\\\
    key.type[group1] = "CTRL+ALT";
    key <FK01> { [ F1 , F1 , F13, F13, XF86_Switch_VT_1  ] };
    key <FK02> { [ F2 , F2 , F14, F14, XF86_Switch_VT_2  ] };
    key <FK03> { [ F3 , F3 , F15, F15, XF86_Switch_VT_3  ] };
    key <FK04> { [ F4 , F4 , F16, F16, XF86_Switch_VT_4  ] };
    key <FK05> { [ F5 , F5 , F17, F17, XF86_Switch_VT_5  ] };
    key <FK06> { [ F6 , F6 , F18, F18, XF86_Switch_VT_6  ] };
    key <FK07> { [ F7 , F7 , F19, F19, XF86_Switch_VT_7  ] };
    key <FK08> { [ F8 , F8 , F20, F20, XF86_Switch_VT_8  ] };
    key <FK09> { [ F9 , F9 , F21, F21, XF86_Switch_VT_9  ] };
    key <FK10> { [ F10, F10, F22, F22, XF86_Switch_VT_10 ] };
    key <FK11> { [ F11, F11, F23, F23, XF86_Switch_VT_11 ] };
    key <FK12> { [ F12, F12, F24, F24, XF86_Switch_VT_12 ] };

    ///// Keypad \\\\\

    key <KPEN> { [ KP_Enter ], type[1]="ONE_LEVEL" };
    key <NMLK> { [ Num_Lock ], type[1]="ONE_LEVEL" };

    key.type[1] = "KEYPAD_ALTGR";
    key <KP7>  { [ KP_Home       , U2196         , KP_7       , NoSymbol    , NoSymbol   , NoSymbol   ] };
    key <KP8>  { [ KP_Up         , uparrow       , KP_8       , NoSymbol    , NoSymbol   , NoSymbol   ] };
    key <KP9>  { [ KP_Prior      , U2179         , KP_9       , NoSymbol    , NoSymbol   , NoSymbol   ] };
    key <KPDV> { [ NoSymbol      , NoSymbol      , KP_Divide  , percent     , division   , NoSymbol   ] };

    key <I187> { [ {Control_L, c}, {Control_L, x}, parenleft  , colon       , bracketleft , braceleft  ], type[1] = "KEYPAD_ALTGR" };
    key <KP4>  { [ KP_Left       , leftarrow     , KP_4       , UFDE4       , d           , D          ] };
    key <KP5>  { [ KP_Down       , downarrow     , KP_5       , UFDE5       , e           , E          ] };
    key <KP6>  { [ KP_Right      , rightarrow    , KP_6       , UFDE6       , f           , F          ] };
    //                                                                                      DOT OPERATOR
    key <KPMU> { [ Scroll_Lock   , NoSymbol      , KP_Multiply, asciicircum , multiply    , U22C5      ] };

    key <I188> { [ {Control_L, v}, NoSymbol      , parenright , semicolon   , bracketright, braceright ], type[1] = "KEYPAD_ALTGR" };
    key <KP1>  { [ KP_End        , U2199         , KP_1       , numbersign  , a           , A          ] };
    key <KP2>  { [ KP_Begin      , NoSymbol      , KP_2       , NoSymbol    , b           , B          ] };
    key <KP3>  { [ KP_Next       , U2198         , KP_3       , NoSymbol    , c           , C          ] };
    //                                                          MINUS SIGN
    key <KPSU> { [ Tab           , NoSymbol      , KP_Subtract, U2212       , endash      , figdash    ] };

    key <KPEQ> { [ {Control_L, z}, {Control_L, y}, KP_Equal   , less        , greater     , NoSymbol   ] };
    key <KP0>  { [ KP_Insert     , NoSymbol      , KP_0       , bar         , x           , X          ] };
    key <KPDL> { [ KP_Delete     , NoSymbol      , KP_Decimal , KP_Separator, underscore  , Tab        ] };
    key <KPAD> { [ {Control_L, a}, NoSymbol      , KP_Add     , ampersand   , multiply    , NoSymbol   ] };
};
